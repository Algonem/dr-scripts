=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#sigilrecorder
=end

custom_require.call(%w[common common-arcana common-items common-travel drinfomon events spellmonitor equipmanager])

class SigilRecorder
	include DRC
	require 'yaml'

	def initialize
		@city_list = ['Crossing', 'Riverhaven', 'Shard']
		@sigil_list = ['abolition','congruence','induction','permutation','rarefaction', 'antipode','ascension','clarification','decay','evolution','integration','metamorphosis','nurture','paradox','unity']
		@season_list = ['summer', 'fall', 'winter', 'spring']
		@data = get_data('sigils')
		@settings = get_settings
		@region = get_region #parse Room.current.image for which region/city we're in
		@season = get_season #make sure we're recording sigils to the correct season
		
		region_list = region_room_list
		walk_list = generate_nogo_list(region_list)
		
		DRC.message("Region detected: #{@region}")
		DRC.message("Season detected: #{@season.capitalize}")
		DRC.message("Checking for \"outdoors\" waggle set...")
		DRCA.do_buffs(@settings, 'outdoors') #perc sigil uses Outdoorsmanship
		
		Flags.add('sigil-danger-room', /.*begins to advance on you.*|You weave back and forth in a dance-like motion|You must be closer to use tactical abilities on your opponent/)
		walk_list.each do |roomid|
			travel_result = DRCT.walk_to(roomid, false)
			DRC.message("Travel Debug: #{travel_result} | Room Target: #{roomid}")
			if Room.current.id == nil
			  DRC.message("Adding #{roomid} to nogo due to lack of visible room number in LOOK.")
			  add_to_nogo(roomid, @data)
			  unstuck_me(roomid)
			  next
			end
			if travel_result == true
				if check_room_data >= 2#Checking if there are unknown sigils in the room. Each room should have exactly 2
				  DRC.message("Sigils in this room already known.")
				else 
				  sigils = find_sigils
				  record_sigil(sigils, @data)
				end #if
			else
				DRC.message('Unable to reach target room. Adding to no-go list and moving to next room.')
				add_to_nogo(Room.current.id, @data)
				next
			end #if
		end #do
	end #initialize
		
		
	def get_season
		/^It is currently (\w+) and it is.*$/ =~ bput('time', /^It is currently.*/)
		return $1
	end #get_season
	
	
	def get_region
		case Room.current.image.downcase
		when /ilithi|Shard/
		  region = 'Shard'
		when /zoluren|Crossing/
		  region = 'Crossing'
		when /therengia|Riverhaven/
		  region = 'Riverhaven'
		else
		  DRC.message("Unsupported area. Sigilrecorder only supports areas where the associated map image file references Crossing, Shard, Riverhaven or their associated provinces. Current map image:#{Room.current.image}")
		end #case
		return region
	end #get_region
	
	
	def check_room_data
		room_array = []
		room_matches = 0
		@city_list.each do |city|
		  @sigil_list.each do |sigil|
		    @data.SigilInfo.dig(city, sigil, @season).each do |number|
			  if number != nil
			    room_array.push(number)
			  end
			next
			end
		  next
		  end
		next
		end
		
		room_array.compact
		room_matches = room_array.count(Room.current.id)

		DRC.message("Current room (#{Room.current.id}) matches in data = #{room_matches}")
		
		return room_matches
		
	end #check_room_data
	
	def unstuck_me(target_room)
		exit_list = Map[target_room].wayto
		exit_list.each do |rnum, dir|
		  Flags.add('sigil-room-detected', /Room Number: \d+/)
		  fput("peer #{dir}")
		  pause
		  if Flags['sigil-room-detected']
		    DRC.retreat
		    fput(way)
			Flags.reset('sigil-room-detected')
			return
		  end
		end
		DRC.message('Cannot find a way out. Exiting script.')
		add_to_nogo(target_room, @data)
		exit
	end #unstuck_me
	
	
	def find_sigils
		room_sigils = []
		while room_sigils.length < 2
			bput('weave', /You weave back and forth in a dance-like motion/, /You must be closer to use tactical abilities on your opponent/, /There is nothing else to face/)
			if Flags['sigil-danger-room']
			  add_to_nogo(Room.current.id, @data)
			  return nil
			end 
			case line = bput('perceive sigil', @sigil_list, 'Roundtime', /^You recall.*/, /^Having recently been searched/, /You are too distracted/, /Something about/)
			when /^You recall.*/
			  DRC.message('Room searched too recently')
			  return nil
			when /You are too distracted/
			  add_to_nogo(Room.current.id, @data)
			  return nil
			when /Something about/
			  add_to_nogo(Room.current.id, @data)
			  return nil
			when /^Having recently been searched/
			  return nil
			when *@sigil_list
			  room_sigils.push(line)
			  DRC.message("Found: #{room_sigils}")
			end
		end #while
		return room_sigils
	end
	
	def region_room_list
		data = Map.list.select do |room|
		  room.image == Room.current.image
		end

		roomlist = []
		data.each do |room|
		  roomlist.push(room.id)
		end
		return roomlist
	end #region_room_list
	
	def add_to_nogo(banroom, file_data)
		if file_data.SigilInfo['nogo'] == nil
		  file_data.SigilInfo['nogo'] = []
		end
		file_data.SigilInfo['nogo'].push(banroom)
		file_data.SigilInfo['nogo'].uniq
		DRC.message("Unsuitable room for sigil harvesting. Adding Room #{banroom} to no-go list.")
		File.open("scripts/data/base-sigils.yaml", "w") { |file| file.write(file_data.to_yaml) }
		Flags.reset('sigil-danger-room')
		pause 0.2
	end #add_to_nogo
	
	
	def generate_nogo_list(room_list)
		DRC.message("Pruning walk list to avoid combat. Current list size: #{room_list.length}")
		hunting_list = get_data('hunting').hunting_zones.values.flatten.uniq
		room_list -= hunting_list
		DRC.message("Walk list has been pruned. New list size: #{room_list.length}")
		pause 1
		return room_list
	end #generate_nogo_list
	
	
	def record_sigil(found_sigils, file_data)
		DRC.message("Writing following data to base-sigils: #{found_sigils}") unless found_sigils.length == 0
		found_sigils.each do |sigil|
		  if file_data.SigilInfo[@region][sigil][@season] == nil
		    file_data.SigilInfo[@region][sigil][@season] = []
		  end
		  file_data.SigilInfo[@region][sigil][@season].push(Room.current.id)
		  file_data.SigilInfo[@region][sigil][@season].uniq
		  respond(file_data.SigilInfo[@region][sigil][@season])
		next
		end
		
		if get_season == @season
		  File.open("scripts/data/base-sigils.yaml", "w") { |file| file.write(file_data.to_yaml) }
		else
		  DRC.message("Season change detected. Aborting file update. Current Season(#{get_season}) | Expected Season:#{@season}")
		end
	end #record_sigil
	
end #SigilRecorder

before_dying do
  Flags.delete('sigil-danger-room')
  Flags.delete('sigil-room-detected')
end

SigilRecorder.new