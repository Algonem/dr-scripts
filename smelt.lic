=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#smelt
=end

custom_require.call(%w[common common-crafting equipmanager])

class Smelt

  def initialize
    EquipmentManager.new.empty_hands

    arg_definitions = [
      [
        { name: 'refine', regex: /refine/i, optional: true }
      ]
    ]

    args = parse_args(arg_definitions)

    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.forging_belt
    @rod = @settings.forging_tools.find { |item| /rod/ =~ item }
    @adjustable_tongs = @settings.adjustable_tongs

    get(@rod)
    if args.refine
      get('flux')
      type("pour", "flux", "in crucible", "flux", true)
    else
      type("stir", "crucible", "with my rod", "rod", false)
      work
      stow(@rod)
    end
  end

  def get(name)
    DRCC.get_crafting_item(name, @bag, @bag_items, @belt)
  end

  def stow(name)
    DRCC.stow_crafting_item(name, @bag, @belt)
  end

  def action()
    DRC.bput("#{@verb} #{@object} #{@tool}" ......
  end

  def type(verb, object, tool, item, stow)
    @verb = verb
    @object = object
    @tool = tool
    @item = item
    @stow = stow
  end

  def work
    loop do
        case action(@verb, @object, @tool)
        when 'Pour what'
          DRC.message("Missing Flux")
          exit
        when 'You can only mix a crucible'
          break
        when 'clumps of molten metal'
          type("turn", "crucible", "with my rod", "rod", false)
        when 'flickers and is unable to consume'
          type("push", "my bellows", "", "bellows", true)
          get('bellows')
        when 'needs more fuel', 'needs some more fuel'
          tongs
          type("push", "fuel", "with my #{@item}", @item, true)
        else
          DRC.bput("adjust my tongs", 'alongside the tong') if @item == 'tongs'
          stow("#{@item}") if @stow
          type("stir", "crucible", "with my rod", "rod", false)
        end
    end
  end

  def tongs
    if @adjustable_tongs 
      get('tongs')
      case DRC.bput("adjust my tongs", 'You lock the tongs', 'With a yank you fold the shovel', 'You cannot adjust', 'You have no idea how')
      when 'You cannot adjust', 'You have no idea how'
        DRC.message('Tongs are not adjustable, reverting. Please change yaml to reflect adjustable_tongs: false')
        @adjustable_tongs = false
        @item = 'shovel'
        stow('tongs')
        get('shovel')
      when 'With a yank you fold the shovel'
        DRC.bput("adjust my tongs", 'alongside the tong')
        @item = 'tongs'
      when 'You lock the tongs'
        @item = 'tongs'
      end
    else
      get('shovel')
      @item = 'shovel'
    end
  end
end

Smelt.new