=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#smelt
=end

custom_require.call(%w[common common-crafting equipmanager])

class Smelt

  def initialize
    EquipmentManager.new.empty_hands

    arg_definitions = [
      [
        { name: 'refine', regex: /refine/i, optional: true }
      ]
    ]

    args = parse_args(arg_definitions)

    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.forging_belt
    @rod = @settings.forging_tools.find { |item| /rod/ =~ item }
    @adjustable_tongs = @settings.adjustable_tongs


    get_crafting_item(@rod, @bag, @bag_items, @belt)
    if args.refine
      refine
    else
      stir
    end
    stow_crafting_item(@rod, @bag, @belt)
  end

  def refine
    DRC.bput('get flux', 'you get')
    case DRC.bput('pour flux in crucible', 'clumps of molten metal', 'flickers and is unable to consume', 'down and needs more fuel', 'roundtime')
    when /roundtime/i
      waitrt?
      fput('stow flux')
      stir
    when 'clumps of molten metal'
      waitrt?
      fput('stow flux')
      turn
    when 'flickers and is unable to consume'
      waitrt?
      fput('stow flux')
      bellows
    when 'down and needs more fuel'
      waitrt?
      fput('stow flux')
      fuel
    end
  end

  def stir
    case DRC.bput("stir crucible with my #{@rod}", 'You can only mix a crucible', 'clumps of molten metal', 'flickers and is unable to consume', 'needs more fuel', 'needs some more fuel', 'roundtime')
    when /roundtime/i
      waitrt?
      stir
    when 'You can only mix a crucible'
      return
    when 'clumps of molten metal'
      waitrt?
      turn
    when 'flickers and is unable to consume'
      waitrt?
      bellows
    when 'needs more fuel', 'needs some more fuel'
      waitrt?
      fuel
    end
  end

  def turn
    waitrt?
    DRC.bput('turn crucible', 'roundtime')
    stir
  end

  def bellows
    get_crafting_item('bellow', @bag, @bag_items, @belt)
    DRC.bput('push my bellow', 'roundtime')
    waitrt?
    stow_crafting_item('bellow', @bag, @belt)
    stir
  end

  def fuel
    if @adjustable_tongs 
      get_crafting_item('tongs', @bag, @bag_items, @belt)
      case DRC.bput("adjust my tongs", 'You lock the tongs', 'With a yank you fold the shovel', 'You cannot adjust', 'You have no idea how')
      when 'You cannot adjust', 'You have no idea how'
        DRC.message('Tongs are not adjustable, reverting. Please change yaml to reflect adjustable_tongs: false')
        @adjustable_tongs = false
        stow_crafting_item('tongs', @bag, @belt)
        fuel
      when 'You lock the tongs'
        push
      when 'With a yank you fold the shovel'
        DRC.bput("adjust my tongs", 'alongside the tong')
        push
      end
    else 
      get_crafting_item('shovel', @bag, @bag_items, @belt)
      bput('push fuel with my shovel', 'roundtime')
      waitrt?
      stow_crafting_item('shovel', @bag, @belt)
    end
    stir
  end

  def push
    case DRC.bput('push fuel with my tongs', 'Roundtime', 'That tool does not seem')
    when 'That tool does not seem'
      DRC.bput("adjust my tongs", 'alongside the tong')
      stow_crafting_item('tongs', @bag, @belt)
      analyze_item
    else
      waitrt?
      DRC.bput("adjust my tongs", 'alongside the tong')
      stow_crafting_item('tongs', @bag, @belt)
    end
  end
end

Smelt.new
