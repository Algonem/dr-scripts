=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#smelt
=end

custom_require.call(%w[common common-crafting common-items])

class Smelt

  def initialize
    DRCI.stow_hands

    arg_definitions = [
      [
        { name: 'refine', regex: /refine/i, optional: true }
      ]
    ]

    args = parse_args(arg_definitions)

    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.forging_belt
    @rod = @settings.forging_tools.find { |item| /rod/ =~ item }
    @adjustable_tongs = @settings.adjustable_tongs

    Flags.add('ingot-done', 'At last the metal appears to be thoroughly mixed')

    get(@rod)
    if args.refine
      get('flux')
      type("pour my flux in crucible", "flux", true)
    else
      type("stir crucible with my rod", "rod", false)
    end
    work
    stow(@rod)
  end

  def get(name)
    DRCC.get_crafting_item(name, @bag, @bag_items, @belt)
  end

  def stow(name)
    DRCC.stow_crafting_item(name, @bag, @belt)
  end

  def type(command, item, stow)
    @command = command
    @item = item
    @stow = stow
  end

  def work
    loop do
      break if Flags['ingot-done']
      case DRC.bput(@command, 'Pour what', 'You can only mix a crucible', 'clumps of molten metal', 'flickers and is unable to consume', 'needs more fuel', 'needs some more fuel', 'roundtime')
      when 'Pour what'
        DRC.message("Missing Flux")
        break
      when 'You can only mix a crucible'
        break
      when 'clumps of molten metal'
        stow("#{@item}") if @stow
        type("turn crucible with my rod", "rod", false)
      when 'flickers and is unable to consume'
        stow("#{@item}") if @stow
        type("push my bellows", "bellows", true)
        get('bellows')
      when 'needs more fuel', 'needs some more fuel'
        stow("#{@item}") if @stow
        tongs
        type("push fuel with my #{@item}", @item, true)
      else
        DRC.bput("adjust my tongs", 'alongside the tong') if @adjustable_tongs
        stow(@item) if @stow
        type("stir crucible with my rod", "rod", false)
      end
    end
  end

  def tongs
    if @adjustable_tongs 
      get('tongs')
      case DRC.bput("adjust my tongs", 'You lock the tongs', 'With a yank you fold the shovel', 'You cannot adjust', 'You have no idea how')
      when 'You cannot adjust', 'You have no idea how'
        DRC.message('Tongs are not adjustable, reverting. Please change yaml to reflect adjustable_tongs: false')
        @adjustable_tongs = false
        @item = 'shovel'
        stow('tongs')
        get('shovel')
      when 'With a yank you fold the shovel'
        DRC.bput("adjust my tongs", 'alongside the tong')
        @item = 'tongs'
      when 'You lock the tongs'
        @item = 'tongs'
      end
    else
      get('shovel')
      @item = 'shovel'
    end
  end
end

before_dying do
  Flags.delete('ingot-done')
end

Smelt.new